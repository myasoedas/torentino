import argparse
import logging
import os
import sys
import time
import requests
import traceback

try:
    import libtorrent as lt
except ImportError:
    print(
        "–û—à–∏–±–∫–∞: –ú–æ–¥—É–ª—å 'libtorrent' –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ: pip install python-libtorrent"
    )
    sys.exit(10)

from dotenv import load_dotenv


def send_telegram(message, token=None, chat_id=None):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram-–±–æ—Ç.
    chat_id = user_id (–±–µ–∑ –º–∏–Ω—É—Å–∞) ‚Äî —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–µ–±–µ –≤ –ª–∏—á–∫—É
    chat_id = id –≥—Ä—É–ø–ø—ã (—Å –º–∏–Ω—É—Å–æ–º) ‚Äî –≤ –≥—Ä—É–ø–ø—É
    """
    token = token or os.getenv("TELEGRAM_BOT_TOKEN")
    chat_id = chat_id or os.getenv("TELEGRAM_CHAT_ID")
    if not token or not chat_id:
        logging.warning("TELEGRAM_BOT_TOKEN –∏–ª–∏ TELEGRAM_CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω—ã ‚Äî —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        return
    url = f"https://api.telegram.org/bot{token}/sendMessage"
    try:
        resp = requests.post(url, data={
            "chat_id": chat_id,
            "text": message,
            "parse_mode": "HTML"
        }, timeout=10)
        if resp.status_code != 200:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram: {resp.text}")
    except Exception as e:
        logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: {e}")


def parse_args():
    parser = argparse.ArgumentParser(
        description="–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –ø–æ .torrent —á–µ—Ä–µ–∑ libtorrent."
    )
    parser.add_argument("--torrent", help="–ü—É—Ç—å –∫ .torrent-—Ñ–∞–π–ª—É (–∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è TORRENT_PATH)", required=False)
    parser.add_argument("--save-dir", help="–ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ (–∏–ª–∏ SAVE_PATH, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é /app/downloads)", required=False)
    parser.add_argument("--port-start", type=int, help="–ù–∞—á–∞–ª—å–Ω—ã–π –ø–æ—Ä—Ç (–∏–ª–∏ LISTEN_PORT_START, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 6881)", required=False)
    parser.add_argument("--port-end", type=int, help="–ö–æ–Ω–µ—á–Ω—ã–π –ø–æ—Ä—Ç (–∏–ª–∏ LISTEN_PORT_END, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 6891)", required=False)
    parser.add_argument("--no-peers-timeout", type=int, default=300, help="–¢–∞–π–º–∞—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –ø–∏—Ä–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 300 —Å–µ–∫—É–Ω–¥ / 5 –º–∏–Ω—É—Ç)")
    parser.add_argument("--verbose", action="store_true", help="–í–∫–ª—é—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–π —Ä–µ–∂–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (DEBUG)")
    parser.add_argument("--logfile", help="–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –ª–æ–≥–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–æ–ª—å–∫–æ –∫–æ–Ω—Å–æ–ª—å)", required=False)
    return parser.parse_args()


def setup_logging(verbose=False, logfile=None):
    log_level = logging.DEBUG if verbose else logging.INFO
    log_format = "[%(asctime)s] %(levelname)s: %(message)s"
    handlers = [logging.StreamHandler(sys.stdout)]
    if logfile:
        handlers.append(logging.FileHandler(logfile, encoding="utf-8"))
    root_logger = logging.getLogger()
    root_logger.setLevel(log_level)
    if root_logger.hasHandlers():
        root_logger.handlers.clear()
    for handler in handlers:
        handler.setFormatter(logging.Formatter(log_format))
        root_logger.addHandler(handler)


def find_torrent_file():
    search_dirs = ["torrents", "/app/torrents"]
    candidates = []
    for folder in search_dirs:
        if os.path.isdir(folder):
            torrents = [
                os.path.join(folder, f)
                for f in os.listdir(folder)
                if f.endswith(".torrent")
            ]
            candidates.extend(torrents)
    if not candidates:
        return None
    candidates.sort(key=lambda f: os.path.getctime(f), reverse=True)
    return candidates[0]


def get_torrent_name(h):
    try:
        tf = h.torrent_file
        if callable(tf):
            tf = tf()
        if hasattr(tf, 'name'):
            name_attr = tf.name
            if callable(name_attr):
                return name_attr()
            return name_attr
    except Exception:
        pass
    try:
        info = h.get_torrent_info()
        if hasattr(info, 'name'):
            name_attr = info.name
            if callable(name_attr):
                return name_attr()
            return name_attr
    except Exception:
        pass
    return "–ë–µ–∑—ã–º—è–Ω–Ω—ã–π —Ç–æ—Ä—Ä–µ–Ω—Ç"


def main():
    # === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∞–≥–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ (–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö) –¥–ª—è Telegram ===
    report_step = 20  # –ö–∞–∂–¥—ã–µ 20% –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å —Å–∫–æ—Ä–æ—Å—Ç—å

    load_dotenv()
    args = parse_args()
    setup_logging(verbose=args.verbose, logfile=args.logfile)

    torrent_path = args.torrent or os.getenv("TORRENT_PATH")
    if not torrent_path:
        torrent_path = find_torrent_file()
        if torrent_path:
            logging.info(f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±—Ä–∞–Ω —Ç–æ—Ä—Ä–µ–Ω—Ç-—Ñ–∞–π–ª: {torrent_path}")
        else:
            logging.error("–ù–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –æ–¥–∏–Ω .torrent —Ñ–∞–π–ª –∏ –Ω–µ –∑–∞–¥–∞–Ω TORRENT_PATH.")
            logging.shutdown()
            sys.exit(1)

    if not torrent_path or not os.path.exists(torrent_path):
        logging.error(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {torrent_path}")
        sys.exit(1)

    save_path = args.save_dir or os.getenv("SAVE_PATH", "/app/downloads")
    port_start = args.port_start or int(os.getenv("LISTEN_PORT_START", "6881"))
    port_end = args.port_end or int(os.getenv("LISTEN_PORT_END", "6891"))

    logging.info("–ó–∞–ø—É—Å–∫ –∑–∞–≥—Ä—É–∑—á–∏–∫–∞ —Ç–æ—Ä—Ä–µ–Ω—Ç–æ–≤")
    logging.info(f"libtorrent version: {lt.version}")
    logging.info(f"TORRENT_PATH: {torrent_path}")
    logging.info(f"SAVE_PATH: {save_path}")
    logging.info(f"LISTEN_PORT_START: {port_start}")
    logging.info(f"LISTEN_PORT_END: {port_end}")
    logging.info(f"NO_PEERS_TIMEOUT: {args.no_peers_timeout} —Å–µ–∫—É–Ω–¥")

    try:
        os.makedirs(save_path, exist_ok=True)
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É {save_path}: {e}")
        sys.exit(1)

    try:
        logging.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è libtorrent...")
        ses = lt.session()
        ses.apply_settings({"listen_interfaces": f"0.0.0.0:{port_start}-{port_end}"})

        logging.info(f"–ß—Ç–µ–Ω–∏–µ .torrent —Ñ–∞–π–ª–∞: {torrent_path}")
        info = lt.torrent_info(torrent_path)
        params = {
            "save_path": save_path,
            "storage_mode": lt.storage_mode_t(2),
            "ti": info,
        }

        logging.info("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ—Ä—Ä–µ–Ω—Ç–∞ –≤ —Å–µ—Å—Å–∏—é...")
        h = ses.add_torrent(params)

        torrent_name = get_torrent_name(h)
        logging.info(f"–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞: {torrent_name}")

        log_start = [
            f"üß≤ <b>–°—Ç–∞—Ä—Ç –∑–∞–≥—Ä—É–∑–∫–∏</b>",
            f"<b>–ò–º—è:</b> {torrent_name}",
            f"<b>–ü—É—Ç—å –∫ .torrent:</b> <code>{torrent_path}</code>",
            f"<b>–°–æ—Ö—Ä–∞–Ω—è–µ–º –≤:</b> <code>{save_path}</code>",
            f"<b>–ü–æ—Ä—Ç—ã:</b> {port_start}-{port_end}",
            f"<b>–†–∞–∑–º–µ—Ä:</b> {info.total_size() / (1024*1024):.2f} MB",
            f"<b>libtorrent:</b> {lt.version}",
        ]
        send_telegram('\n'.join(log_start))

        last_progress = -1
        last_reported_percent = 0
        start_time = time.time()
        no_peers_time = 0
        no_peers_timer_active = False

        try:
            while True:
                s = h.status()
                progress = int(s.progress * 100)

                if s.num_peers == 0:
                    no_peers_time += 1
                    if not no_peers_timer_active:
                        print()
                        logging.warning("–ù–µ—Ç –ø–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã—Ö –ø–∏—Ä–æ–≤. –ó–∞–ø—É—â–µ–Ω —Ç–∞–π–º–µ—Ä –∞–≤—Ç–æ–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—é –ø–∏—Ä–æ–≤.")
                        send_telegram(
                            f"‚ö†Ô∏è –ù–µ—Ç –ø–∏—Ä–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ <b>{torrent_name}</b> "
                            f"–¥–æ–ª—å—à–µ {args.no_peers_timeout} —Å–µ–∫. –ó–∞–≥—Ä—É–∑–∫–∞ –±—É–¥–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, –µ—Å–ª–∏ –ø–∏—Ä—ã –Ω–µ –ø–æ—è–≤—è—Ç—Å—è."
                        )
                        no_peers_timer_active = True
                    if no_peers_time >= args.no_peers_timeout:
                        logging.error(f"–ü–∏—Ä–æ–≤ –Ω–µ—Ç {args.no_peers_timeout} —Å–µ–∫—É–Ω–¥ –ø–æ–¥—Ä—è–¥. –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞.")
                        send_telegram(
                            f"‚ö†Ô∏è –ù–µ—Ç –ø–∏—Ä–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ <b>{torrent_name}</b> "
                            f"–¥–æ–ª—å—à–µ {args.no_peers_timeout} —Å–µ–∫. –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞."
                        )
                        print()
                        sys.exit(5)
                else:
                    if no_peers_timer_active:
                        print()
                        downloaded = s.total_done / (1024 * 1024)
                        total = s.total_wanted / (1024 * 1024)
                        speed = s.download_rate / 1024
                        if s.download_rate > 0:
                            eta_seconds = int((s.total_wanted - s.total_done) / s.download_rate)
                            if eta_seconds > 3600:
                                eta_str = f"{eta_seconds // 3600}—á {(eta_seconds % 3600) // 60}–º"
                            elif eta_seconds > 60:
                                eta_str = f"{eta_seconds // 60}–º {eta_seconds % 60}—Å"
                            else:
                                eta_str = f"{eta_seconds}—Å"
                        else:
                            eta_str = "‚Äî"
                        logging.info(f"–ü–æ—è–≤–∏–ª–∏—Å—å –ø–∏—Ä—ã —Å–ø—É—Å—Ç—è {no_peers_time} —Å–µ–∫—É–Ω–¥ –æ–∂–∏–¥–∞–Ω–∏—è. –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä.")
                        send_telegram(
                            f"‚úÖ –ü–æ—è–≤–∏–ª–∏—Å—å –ø–∏—Ä—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ <b>{torrent_name}</b> —Å–ø—É—Å—Ç—è {no_peers_time} —Å–µ–∫. "
                            f"–°—Ç–∞—Ç—É—Å: <b>{progress}%</b> | ETA: {eta_str} | "
                            f"–°–∫–∞—á–∞–Ω–æ: {downloaded:.2f}/{total:.2f} MB"
                        )
                        no_peers_timer_active = False
                    no_peers_time = 0

                # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Å–∫–æ—Ä–æ—Å—Ç—å —Å–∫–∞—á–∏–≤–∞–Ω–∏—è > 0
                downloaded = s.total_done / (1024 * 1024)
                total = s.total_wanted / (1024 * 1024)
                speed = s.download_rate / 1024  # KB/s
                if s.download_rate > 0:
                    if s.download_rate > 0:
                        eta_seconds = int((s.total_wanted - s.total_done) / s.download_rate)
                        if eta_seconds > 3600:
                            eta_str = f"{eta_seconds // 3600}—á {(eta_seconds % 3600) // 60}–º"
                        elif eta_seconds > 60:
                            eta_str = f"{eta_seconds // 60}–º {eta_seconds % 60}—Å"
                        else:
                            eta_str = f"{eta_seconds}—Å"
                    else:
                        eta_str = "‚Äî"
                else:
                    eta_str = "‚Äî"

                sys.stdout.write(
                    f"\r–ü—Ä–æ–≥—Ä–µ—Å—Å: {progress}% | "
                    f"–°–∫–∞—á–∞–Ω–æ: {downloaded:.2f}/{total:.2f} MB | "
                    f"–°–∫–æ—Ä–æ—Å—Ç—å: {speed:.2f} KB/s | "
                    f"ETA: {eta_str} | "
                    f"–ü–∏—Ä–æ–≤: {s.num_peers}   "
                )
                sys.stdout.flush()

                # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∫–∞–∂–¥—ã–µ report_step% —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Å–∫–æ—Ä–æ—Å—Ç—å
                if (progress // report_step > last_reported_percent // report_step and 
                        progress != 100 and s.download_rate > 0):
                    send_telegram(
                        f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: <b>{progress}%</b> | ETA: {eta_str} | "
                        f"–°–∫–∞—á–∞–Ω–æ: {downloaded:.2f}/{total:.2f} MB | "
                        f"–ü–∏—Ä–æ–≤: {s.num_peers}"
                    )
                    last_reported_percent = progress
                last_progress = progress

                if s.state == lt.torrent_status.seeding:
                    break
                time.sleep(1)
        except KeyboardInterrupt:
            logging.warning("–û–ø–µ—Ä–∞—Ü–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (Ctrl+C).")
            send_telegram(
                f"‚õîÔ∏è –°–∫–∞—á–∏–≤–∞–Ω–∏–µ <b>{torrent_name}</b> –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (Ctrl+C)."
            )
            sys.exit(4)

        elapsed = time.time() - start_time
        print()
        logging.info("–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

        try:
            total = s.total_wanted / (1024 * 1024)
            average_speed_mb = total / elapsed if elapsed > 0 else 0
            average_speed_kb = average_speed_mb * 1024
            logging.info(f"–°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å –∑–∞ —Å–µ—Å—Å–∏—é: {average_speed_kb:.2f} KB/s")
        except Exception as e:
            average_speed_kb = 0
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã—á–∏—Å–ª–∏—Ç—å —Å—Ä–µ–¥–Ω—é—é —Å–∫–æ—Ä–æ—Å—Ç—å: {e}")

        log_end = [
            f"‚úÖ <b>–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞</b>",
            f"<b>–ò–º—è:</b> {torrent_name}",
            f"<b>–í—Ä–µ–º—è:</b> {elapsed:.1f} —Å–µ–∫",
            f"<b>–°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å:</b> {average_speed_kb:.2f} KB/s",
            f"<b>–§–∞–π–ª—ã:</b>",
        ]
        for root, dirs, files in os.walk(save_path):
            for file in files:
                log_end.append(f"‚Ä¢ <code>{os.path.join(root, file)}</code>")

        send_telegram('\n'.join(log_end))
        logging.info(f"–û–±—â–µ–µ –≤—Ä–µ–º—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {elapsed:.1f} —Å–µ–∫.")

    except Exception as e:
        msg = str(e).lower()
        logging.error(f"{type(e).__name__}: {e}")
        logging.error(traceback.format_exc())
        send_telegram(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: <b>{locals().get('torrent_name', 'N/A')}</b>\n"
            f"–ü—Ä–æ–±–ª–µ–º–∞: {type(e).__name__}: {e}\n\n<pre>{traceback.format_exc()}</pre>"
        )
        sys.exit(3)


if __name__ == "__main__":
    main()
